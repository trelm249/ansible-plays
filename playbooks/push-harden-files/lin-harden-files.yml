---
- name: push configuration files and scripts to comply with the DISA STIG for RHEL 7
  hosts: "{{R7HOSTS}}"

  tasks:
  - name: "Ensure packages are installed"
    package:
     name: "{{item}}"
     state: present
    with_items:
     - vlock
     - audit
     - audispd-plugins
     - selinux-policy
     - selinux-policy-targeted
     - screen
     - dracut-fips
     - fipscheck
     - aide
     - rsyslog
     - pam_pkcs11
     - pcsc-lite
     - opensc
     - yum-utils
     - mailx
     - cronie
     - crontabs
    tags:
     - etc
     - packages
     - High  

  - name: "Remove prohibited packages"
    package:
      name: "{{item}}"
      state: absent
    with_items:
      - ypserv
      - rsh-server
      - telnet-server
    tags:
      - stig-packages
      - High


  - name: copy over the script to check for unowned or ungrouped files
    copy:
      src: ./utils/file-owner-check.sh
      dest: /etc/cron.daily/
      mode: 0750
      owner: root
      group: root
    tags:
      - etc
      - stig-file-owner


  - name: copy over the DISA login banner for Command Line
    copy:
      src: "{{item}}"
      dest: /etc/
      mode: 0644
      owner: root
      group: root
    with_items:
      - ./banner/issue
      - ./banner/issue.net
    tags:
      - stig-banner
      - etc

  - name: copy over the DISA shell session parameters for Command Line
    copy:
      src: "{{item}}"
      dest: /etc/profile.d/
      mode: 0755
      owner: root
      group: root
    with_items:
      - ./profiled/stig-timeout.sh
      - ./profiled/stig-timeout.csh
      - ./profiled/stig-umask.sh
      - ./profiled/stig-timeout.csh
      - ./profiled/vlock-alias.sh
      - ./profiled/vlock-alias.csh
    tags:
      - stig-timeout
      - etc

  - name: Configure SSH daemon
    copy:
      src: ./ssh/sshd_config
      dest: /etc/ssh/
      mode: 0600
      owner: root
      group: root
    tags:
      - etc
      - stig-ssh
      - High  

  - name: Configure Audit daemon
    copy:
      src: ./audit/auditd.conf
      dest: /etc/audit/
      mode: 0600
      owner: root
      group: root
    tags:
      - etc
      - stig-audit
      - High

  - name: Confiure Audit Rules
    copy:
      src: ./audit/audit.rules
      dest: "{{item}}"
      mode: 0600
      owner: root
      group: root
    with_items:
      - /etc/audit/rules.d/
      - /etc/audit/
    tags:
      - etc
      - stig-audit
      - High

  - name: filter audit log messages from local messages log
    lineinfile:
      path: /etc/rsyslog.conf
      regexp: '#filter audit log messages for local messages log'
      line: '#filter audit log messages for local messages log'
      insertafter: '^#### RULES ####'
      state: present
    tags:
      - etc
      - rsyslog-config

  - name: filter audit log messages from local messages log+
    lineinfile:
      path: /etc/rsyslog.conf
      regexp: ':programname, isequal, "audit" stop'
      line: ':programname, isequal, "audit" stop'
      insertafter: '^#filter audit log messages for local messages log'
      state: present
    tags:
      - etc
      - rsyslog-config

  - name: filter audit log messages from local messages log++
    lineinfile:
      path: /etc/rsyslog.conf
      regexp: ':programname, isequal, "audispd" stop'
      line: ':programname, isequal, "audispd" stop'
      insertafter: '^:programname, isequal, "audit" stop'
      state: present
    tags:
      - etc
      - rsyslog-conf

  - name: Configure Sysctl Securit Limits
    copy:
      src: ./modprob/limits.conf
      dest: /etc/security/
      mode: 0640
      owner: root
      group: root
    tags:
      - etc
      - stig-sysctl
      - Hign  

  - name: Configure Sysctl Configuration
    copy:
      src: ./modprob/sysctl.conf
      dest: /etc/security/
      mode: 0640
      owner: root
      group: root
    tags:
      - etc
      - stig-sysctl
      - High

  - name: Reload Sysctl
    command: "sysctl -p /etc/sysctl.conf"
    tags:
      - etc
      - stig-sysctl
  
  - name: Disable Restricted Protocols and Filesystem Modules
    copy:
      src: ./modprob/stig.conf
      dest: /etc/modprobe.d/
      owner: root
      group: root
      mode: 0640
    tags:
      - etc
      - stig-modprobe

  - name: Disable bluetooth altogether
    systemd:
      name: bluetooth.service
      state: stopped
      enabled: no
      masked: yes
    ignore_errors: yes
    tags:
      - stig-modprobe
      - stig-bluetooth

  - name: Ensure SELinux is enforcing targeted
    selinux:
      policy: targeted
      state: enforcing
    tags:
      - etc
      - stig-selinux
      - High

  - name: Make the SELinux configuration immutable
    command: "chattr +i /etc/selinux/config"
    tags:
      - etc
      - stig-selinux

  - name: Remove unneeded users
    user:
      name: "{{item}}"
      state: absent
      remove: yes
    with_items:
      - uucp
      - sync
      - news
      - games
      - gopher
      - shutdown
    ignore_errors: yes
    tags:
      - etc
      - stig-users

  - name: check prelink binary installed
    stat:
      path: /usr/sbin/prelink
    register: prelink_exists
    tags:
      - grub2_enable_fips_mode
      - high

  - name: set permissions on the prelink config
    file:
      path: /etc/sysconfig/prelink
      state: touch
      mode: 0644
      owner: root
      group: root
    tags:
      - grub2_enable_fips_mode
      - high

  - name: disable prelink
    lineinfile:
      dest: /etc/sysconfig/prelink
      regexp: ^#?PRELINKING
      line: PRELINKING=no
    tags:
      - grub2_enable_fips_mode
      - high
      - etc

  - name: revert prelinking binaries
    command: /usr/sbin/prelink -ua
    when:
      - prelink_exists.stat.exists
    tags:
      - grub2_enable_fips_mode
      - high

  - name: Check if system supports AES-NI
    command: grep -q -m1 -o aes /proc/cpuinfo
    failed_when: aesni_supported.rc > 1
    register: aesni_supported
    check_mode: false
    tags:
      - grub2_enable_fips_mode
      - high

  - name: Ensure dracut-fips-aesni is installed
    package:
      name: dracut-fips-aesni
      state: present
    when:
      - aesni_supported.rc == 0
    tags:
      - grub2_enable_fips_mode
      - high

  - name: check fips argument exists
    command: grep 'GRUB_CMDLINE_LINUX.*fips=' /etc/default/grub
    failed_when: false
    register: fipsargcheck
    check_mode: false
    tags:
      - grub2_enable_fips_mode
      - high

  - name: Rebuild initramfs
    command: dracut -f
    tags:
      - grub2_enable_fips_mode
      - high

  - name: replace existing fips argument
    replace:
      path: /etc/default/grub
      regexp: fips=.
      replace: fips=1
    when:
      - fipsargcheck.rc == 0
    tags:
      - grub2_enable_fips_mode
      - high
      - etc

  - name: add fips argument
    replace:
      path: /etc/default/grub
      regexp: (GRUB_CMDLINE_LINUX=.*)"
      replace: \1 fips=1"
    when:
      - fipsargcheck.rc != 0
    tags:
      - grub2_enable_fips_mode
      - high_severity
      - etc

  - name: get boot device uuid
    command: findmnt --noheadings --output uuid --target /boot
    register: bootuuid
    check_mode: false
    tags:
      - grub2_enable_fips_mode
      - high_severity

  - name: check boot argument exists
    command: grep 'GRUB_CMDLINE_LINUX.*boot=' /etc/default/grub
    failed_when: false
    register: bootargcheck
    check_mode: false
    tags:
      - grub2_enable_fips_mode
      - high_severity

  - name: replace existing boot argument
    replace:
      path: /etc/default/grub
      regexp: boot=\w*-\w*-\w*-\w*-\w*"
      replace: boot={{ bootuuid.stdout }}"
    when:
      - bootargcheck.rc == 0
    tags:
      - grub2_enable_fips_mode
      - high

  - name: add boot argument
    replace:
      path: /etc/default/grub
      regexp: (GRUB_CMDLINE_LINUX=.*)"
      replace: \1 boot=UUID={{ bootuuid.stdout }}"
    when:
      - bootargcheck.rc != 0
    tags:
      - grub2_enable_fips_mode
      - high
        
  - name: update bootloader menu
    command: '/sbin/grubby --update-kernel=ALL --args="fips=1 boot=UUID={{ bootuuid.stdout }}"'
    tags:
      - grub2_enable_fips_mode
      - high

  - name: Reset SE Linux File Context on the etc directory structructure
    command: "restorecon -R /etc"
    tags:
      - utils
      - etc

  - name: Restart Services
    service:
      name: "{{item}}"
      enabled: "yes"
      state: "restarted"
    with_items:
      - sshd
      - rsyslog
    tags:
      - etc
      - stig-ssh
      - stig-rsyslog

  - name: Read list of files with incorrect ownership
    command: rpm -Va --nodeps --nosignature --nofiledigest --nosize --nomtime --nordev --nocaps --nolinkto --nomode
    args:
      warn: false
    register: files_with_incorrect_ownership
    failed_when: files_with_incorrect_ownership.rc > 1
    changed_when: false
    check_mode: false
    tags:
      - rpm_verify_ownership
      - high

  - name: Create list of packages
    command: rpm -qf "{{ item }}"
    args:
      warn: false
    with_items: '{{ files_with_incorrect_ownership.stdout_lines | map(''regex_findall'', ''^[.]+[U|G]+.* (\/.*)'', ''\1'') | map(''join'') | select(''match'', ''(\/.*)'') | list | unique }}'
    register: list_of_packages
    changed_when: false
    check_mode: false
    when:
      - (files_with_incorrect_ownership.stdout_lines | length > 0)
    tags:
      - rpm_verify_ownership
      - high

  - name: Correct file ownership with RPM
    command: rpm --quiet --setugids '{{ item }}'
    args:
      warn: false
    with_items: '{{ list_of_packages.results | map(attribute=''stdout_lines'') | list | unique }}'
    when:
      - (files_with_incorrect_ownership.stdout_lines | length > 0)
    ignore_errors: yes
    tags:
      - rpm_verify_ownership
      - high

  - name: Read files with incorrect hash
    command: rpm -Va --nodeps --nosize --nomtime --nordev --nocaps --nolinkto --nouser --nogroup --nomode --noconfig --noghost
    args:
      warn: false
    register: files_with_incorrect_hash
    changed_when: false
    failed_when: files_with_incorrect_hash.rc > 1
    check_mode: false
    tags:
      - rpm_verify_hashes
      - high

  - name: Create list of packages
    command: rpm -qf "{{ item }}"
    args:
      warn: false
    with_items: '{{ files_with_incorrect_hash.stdout_lines | map(''regex_findall'', ''^[.]+[5]+.* (\/.*)'', ''\1'') | map(''join'') | select(''match'', ''(\/.*)'') | list | unique }}'
    register: list_of_packages
    changed_when: false
    check_mode: false
    when:
      - files_with_incorrect_hash.stdout_lines is defined
      - (files_with_incorrect_hash.stdout_lines | length > 0)
    tags:
      - rpm_verify_hashes
      - high

  - name: Reinstall packages of files with incorrect hash
    command: yum reinstall -y ''{{ item }}''
    args:
      warn: false
    with_items: '{{ list_of_packages.results | map(attribute=''stdout_lines'') | list | unique }}'
    when:
      - files_with_incorrect_hash.stdout_lines is defined
      - (files_with_incorrect_hash.stdout_lines | length > 0)
    ignore_errors: yes
    tags:
      - rpm_verify_hashes
      - high

  - name: Read list of files with incorrect permissions
    command: rpm -Va --nodeps --nosignature --nofiledigest --nosize --nomtime --nordev --nocaps --nolinkto --nouser --nogroup
    args:
      warn: false
    register: files_with_incorrect_permissions
    failed_when: files_with_incorrect_permissions.rc > 1
    changed_when: false
    check_mode: false
    tags:
      - rpm_verify_permissions
      - high

  - name: Create list of packages
    command: rpm -qf "{{ item }}"
    args:
      warn: false
    with_items: '{{ files_with_incorrect_permissions.stdout_lines | map(''regex_findall'', ''^[.]+[M]+.* (\/.*)'', ''\1'') | map(''join'') | select(''match'', ''(\/.*)'') | list | unique }}'
    register: list_of_packages
    changed_when: false
    check_mode: false
    when:
      - (files_with_incorrect_permissions.stdout_lines | length > 0)
    tags:
      - rpm_verify_permissions
      - high

  - name: Correct file permissions with RPM
    command: rpm --setperms "{{ item }}"
    args:
      warn: false
    with_items: '{{ list_of_packages.results | map(attribute=''stdout_lines'') | list | unique }}'
    when:
      - (files_with_incorrect_permissions.stdout_lines | length > 0)
    ignore_errors: yes
    tags:
      - rpm_verify_permissions
      - high

  - name: Configure Periodic Execution of AIDE
    cron:
      name: run AIDE check
      minute: 5
      hour: 4
      weekday: 0
      user: root
      job: '/usr/sbin/aide --check |/usr/bin/mailx -s \"\$HOSTNAME-\$(date +%F) - aide integrity check\" root@localhost"'
      cron_file: aide-daily-check
    tags:
      - aide_periodic_cron_checking
      - medium

  - name: Ensure GPG check is globally activated (yum)
    ini_file:
      dest: /etc/yum.conf
      section: main
      option: gpgcheck
      value: 1
      create: false
    when:
      - (ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or yum_config_file.stat.exists)
    tags:
      - ensure_gpgcheck_globally_activated
      - high

  - name: Set Account Expiration Following Inactivity
    lineinfile:
      create: true
      dest: /etc/default/useradd
      regexp: ^INACTIVE
      line: INACTIVE=0
    tags:
      - account_disable_post_pw_expiration
      - medium

  - name: Prevent Log In to Accounts With Empty Password - system-auth
    replace:
      dest: /etc/pam.d/system-auth
      follow: true
      regexp: nullok
    tags:
      - no_empty_passwords
      - high

  - name: Prevent Log In to Accounts With Empty Password - password-auth
    replace:
      dest: /etc/pam.d/password-auth
      follow: true
      regexp: nullok
    tags:
      - no_empty_passwords
      - high

  - name: Set Password Maximum Age
    lineinfile:
      create: true
      dest: /etc/login.defs
      regexp: ^#?PASS_MAX_DAYS
      line: PASS_MAX_DAYS 60
    tags:
      - accounts_maximum_age_login_defs
      - medium

  - name: Set Password Minimum Age
    lineinfile:
      create: true
      dest: /etc/login.defs
      regexp: ^#?PASS_MIN_DAYS
      line: PASS_MIN_DAYS 1
    tags:
      - accounts_minimum_age_login_defs
      - medium

  - name: Set Password Hashing Algorithm in /etc/libuser.conf
    lineinfile:
      dest: /etc/libuser.conf
      insertafter: ^\s*\[defaults]
      regexp: ^#?crypt_style
      line: crypt_style = sha512
      state: present
      create: true
    tags:
      - set_password_hashing_algorithm_libuserconf
      - medium

  - name: Set Password Hashing Algorithm in /etc/login.defs
    lineinfile:
      dest: /etc/login.defs
      regexp: ^#?ENCRYPT_METHOD
      line: ENCRYPT_METHOD SHA512
      state: present
      create: true
    tags:
      - set_password_hashing_algorithm_logindefs
      - medium

  - name: Set Fail Delay in /etc/login.defs
    lineinfile:
      dest: /etc/login.defs
      regexp: ^#?FAIL_DELAY
      line: FAIL_DELAY 4
      state: present
      create: true
    tags:
      - set_fail_delay_logindefs
      - medium

  - name: Ensure PAM variable ucredit is set accordingly
    lineinfile:
      create: true
      dest: /etc/security/pwquality.conf
      regexp: ^#?\s*ucredit
      line: ucredit = -1
    tags:
      - accounts_password_pam_ucredit
      - medium

  - name: Ensure PAM variable maxrepeat is set accordingly
    lineinfile:
      create: true
      dest: /etc/security/pwquality.conf
      regexp: ^#?\s*maxrepeat
      line: maxrepeat = 2
    tags:
      - accounts_password_pam_maxrepeat
      - medium

  - name: Ensure PAM variable ocredit is set accordingly
    lineinfile:
      create: true
      dest: /etc/security/pwquality.conf
      regexp: ^#?\s*ocredit
      line: ocredit = -1
    tags:
      - accounts_password_pam_ocredit
      - medium

  - name: Ensure PAM variable lcredit is set accordingly
    lineinfile:
      create: true
      dest: /etc/security/pwquality.conf
      regexp: ^#?\s*lcredit
      line: lcredit = -1
    tags:
      - accounts_password_pam_lcredit
      - medium

  - name: Ensure PAM variable dcredit is set accordingly
    lineinfile:
      create: true
      dest: /etc/security/pwquality.conf
      regexp: ^#?\s*dcredit
      line: dcredit = -1
    tags:
      - accounts_password_pam_dcredit
      - medium

  - name: Ensure PAM variable minlen is set accordingly
    lineinfile:
      create: true
      dest: /etc/security/pwquality.conf
      regexp: ^#?\s*minlen
      line: minlen = 15
    tags:
      - accounts_password_pam_minlen
      - medium

  - name: Ensure PAM variable minclass is set accordingly
    lineinfile:
      create: true
      dest: /etc/security/pwquality.conf
      regexp: ^#?\s*minclass
      line: minclass = 4
    tags:
      - accounts_password_pam_minclass
      - medium

  - name: Ensure PAM variable difok is set accordingly
    lineinfile:
      create: true
      dest: /etc/security/pwquality.conf
      regexp: ^#?\s*difok
      line: difok = 8
    tags:
      - accounts_password_pam_difok
      - medium

  - name: Ensure PAM variable maxclassrepeat is set accordingly
    lineinfile:
      create: true
      dest: /etc/security/pwquality.conf
      regexp: ^#?\s*maxclassrepeat
      line: maxclassrepeat = 4
    tags:
      - accounts_password_pam_maxclassrepeat
      - medium

  - name: Set Password Retry Prompts Permitted Per-Session - system-auth (change)
    replace:
      dest: /etc/pam.d/system-auth
      follow: true
      regexp: (^.*\spam_pwquality.so\s.*retry\s*=\s*)(\S+)(.*$)
      replace: \g<1>3\g<3>
    tags:
      - accounts_password_pam_retry
      - medium

  - name: Set Password Retry Prompts Permitted Per-Session - system-auth (add)
    replace:
      dest: /etc/pam.d/system-auth
      follow: true
      regexp: ^.*\spam_pwquality.so\s(?!.*retry\s*=\s*).*$
      replace: \g<0> retry=3
    tags:
      - accounts_password_pam_retry
      - medium

  - name: Add auth pam_faillock preauth deny before pam_unix.so
    pamd:
      name: '{{ item }}'
      type: auth
      control: sufficient
      module_path: pam_unix.so
      new_type: auth
      new_control: required
      new_module_path: pam_faillock.so
      module_arguments: preauth silent deny=3
      state: before
    loop:
      - system-auth
      - password-auth
    tags:
      - accounts_passwords_pam_faillock_deny
      - medium

  - name: Add deny argument to auth pam_faillock preauth
    pamd:
      name: '{{ item }}'
      type: auth
      control: required
      module_path: pam_faillock.so
      module_arguments: preauth silent deny=3
      state: args_present
    loop:
      - system-auth
      - password-auth
    tags:
      - accounts_passwords_pam_faillock_deny
      - medium

  - name: Add auth pam_faillock authfail deny after pam_unix.so
    pamd:
      name: '{{ item }}'
      type: auth
      control: sufficient
      module_path: pam_unix.so
      new_type: auth
      new_control: '[default=die]'
      new_module_path: pam_faillock.so
      module_arguments: authfail deny=3
      state: after
    loop:
      - system-auth
      - password-auth
    tags:
      - accounts_passwords_pam_faillock_deny
      - medium

  - name: Add deny argument to auth pam_faillock authfail
    pamd:
      name: '{{ item }}'
      type: auth
      new_type: auth
      control: '[default=die]'
      module_path: pam_faillock.so
      module_arguments: authfail deny=3
      state: args_present
    loop:
      - system-auth
      - password-auth
    tags:
      - accounts_passwords_pam_faillock_deny
      - medium

...
